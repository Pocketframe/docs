"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[6953],{6578:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>t,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"middleware","title":"Middleware","description":"Middleware provides a convenient mechanism for filtering HTTP requests entering your application. Global middleware is applied to all routes, while route-specific middleware can be applied to individual routes or groups.","source":"@site/docs/middleware.md","sourceDirName":".","slug":"/middleware","permalink":"/docs/middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/middleware.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Routing","permalink":"/docs/routing"},"next":{"title":"Controllers","permalink":"/docs/controllers"}}');var d=n(4848),a=n(8453);const l={sidebar_position:6},s="Middleware",t={},o=[{value:"Global Middleware",id:"global-middleware",level:2},{value:"Route-Specific Middleware",id:"route-specific-middleware",level:2},{value:"Creating Middleware",id:"creating-middleware",level:2},{value:"Example Middleware:",id:"example-middleware",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"middleware",children:"Middleware"})}),"\n",(0,d.jsx)(r.p,{children:"Middleware provides a convenient mechanism for filtering HTTP requests entering your application. Global middleware is applied to all routes, while route-specific middleware can be applied to individual routes or groups."}),"\n",(0,d.jsx)(r.h2,{id:"global-middleware",children:"Global Middleware"}),"\n",(0,d.jsxs)(r.p,{children:["All global middleware is defined in the ",(0,d.jsx)(r.code,{children:"config/middleware.php"})," file. These middleware will run on every request through the application."]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-php",metastring:"showLineNumbers",children:"return [\n    /**\n     * Global middleware that runs on every request\n     *\n     * @var array<class-string>\n     */\n    'global' => [\n        CsrfMiddleware::class,\n        SessionMiddleware::class,\n    ],\n];\n"})}),"\n",(0,d.jsx)(r.h2,{id:"route-specific-middleware",children:"Route-Specific Middleware"}),"\n",(0,d.jsxs)(r.p,{children:["You can apply middleware to a specific route or group of routes by using the ",(0,d.jsx)(r.code,{children:"group"})," method with a closure."]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-php",metastring:"showLineNumbers",children:"$router->group(['middleware' => [CsrfMiddleware::class]], function ($router) {\n    $router->get('/posts', ['PostsController', 'index'], name: 'posts.index');\n});\n"})}),"\n",(0,d.jsxs)(r.p,{children:["You can also define middleware groups in the ",(0,d.jsx)(r.code,{children:"config/middleware.php"})," file."]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-php",children:"/**\n * Middleware groups\n * These middleware groups are applied to the routes in the web.php file\n *\n * @var array<string, array<class-string>>\n */\n'groups' => [\n  'web' => [\n    AuthMiddleware::class,\n  ],\n];\n"})}),"\n",(0,d.jsx)(r.h2,{id:"creating-middleware",children:"Creating Middleware"}),"\n",(0,d.jsxs)(r.p,{children:["You can create your own middleware and register it in the ",(0,d.jsx)(r.code,{children:"config/middleware.php"})," file or apply it to a specific route or group of routes. To create a middleware run a pocket command ",(0,d.jsx)(r.code,{children:"php pocket make:middleware <name>"})]}),"\n",(0,d.jsx)(r.h3,{id:"example-middleware",children:"Example Middleware:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-bash",children:"php pocket make:middleware ExampleMiddleware\n"})}),"\n",(0,d.jsxs)(r.p,{children:["The middleware will be created in the ",(0,d.jsx)(r.code,{children:"app/Middleware"})," directory."]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\n\nnamespace App\\Middleware;\n\nuse Closure;\nuse Pocketframe\\Contracts\\MiddlewareInterface;\nuse Pocketframe\\Http\\Request\\Request;\nuse Pocketframe\\Http\\Response\\Response;\n\nclass ExampleMiddleware implements MiddlewareInterface\n{\n  public function handle(Request $request, Closure $next): Response\n  {\n    // Pre-middleware logic\n    $response = $next($request);\n\n    // Post-middleware logic\n    return $response;\n  }\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>s});var i=n(6540);const d={},a=i.createContext(d);function l(e){const r=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);