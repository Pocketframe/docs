"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[7417],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"pocketORM/relationship","title":"Relationships","description":"Introduction","source":"@site/docs/pocketORM/relationship.md","sourceDirName":"pocketORM","slug":"/pocketORM/relationship","permalink":"/docs/docs/pocketORM/relationship","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/pocketORM/relationship.md","tags":[],"version":"current","sidebarPosition":27,"frontMatter":{"sidebar_position":27},"sidebar":"tutorialSidebar","previous":{"title":"Pagination","permalink":"/docs/docs/pocketORM/pagination"},"next":{"title":"schemascript","permalink":"/docs/docs/pocketORM/schemascript"}}');var s=t(4848),r=t(8453);const a={sidebar_position:27},o="Relationships",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Defining Relationships",id:"defining-relationships",level:2},{value:"One-to-One/ Entity::HAS_ONE",id:"one-to-one-entityhas_one",level:3},{value:"One-to-Many/ Entity::HAS_MULTIPLE",id:"one-to-many-entityhas_multiple",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"relationships",children:"Relationships"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["Relationships are a way to define the relationship between entities. They are defined in the entity class using the ",(0,s.jsx)(n.code,{children:"$relationship"})," property. The ",(0,s.jsx)(n.code,{children:"$relationship"})," property is an array of relationships. The creates relationships to your database tables. You can define a:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/docs/pocketORM/relationship#one-to-one",children:"one-to-one"})}),"\n",(0,s.jsx)(n.li,{children:"one-to-many"}),"\n",(0,s.jsx)(n.li,{children:"many-to-one"}),"\n",(0,s.jsx)(n.li,{children:"many-to-many"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Basic relationships are defined using the ",(0,s.jsx)(n.code,{children:"Entity::HAS_ONE"}),", ",(0,s.jsx)(n.code,{children:"Entity::HAS_MULTIPLE"}),", ",(0,s.jsx)(n.code,{children:"Entity::OWNED_BY"}),", and ",(0,s.jsx)(n.code,{children:"Entity::BELONGS_TO"})," constants."]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nnamespace App\\Entities;\n\nuse Pocketframe\\PocketORM\\Entity\\Entity;\n\nclass Category extends Entity\n{\n   protected array $relationship = [\n      /**\n      * One-to-One\n      * In the array we have: parent entity, related entity, foreign key\n      */\n      'profile' => [Entity::HAS_ONE, Profile::class, 'user_id'],\n      /**\n      * One-to-Many\n      * In the array we have: parent entity, related entity, foreign key\n      */\n      'posts'   => [Entity::HAS_MULTIPLE, Post::class, 'post_id'],\n      /**\n       *  Many-to-One (Belongs to)\n       * In the array we have: parent entity, related entity, foreign key\n       */\n      'role'    => [Entity::OWNED_BY, Role::class, 'role_id'],\n      /**\n       * Bridge table\n       * In the array we have: parent entity, related entity, bridge table, foreign key, related foreign key\n       */\n      'groups'  => [Entity::BRIDGE, Group::class, 'user_groups', 'user_id', 'group_id']\n    ];\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"defining-relationships",children:"Defining Relationships"}),"\n",(0,s.jsxs)(n.p,{children:["Relationships are defined in the entity class using the ",(0,s.jsx)(n.code,{children:"$relationship"})," property. The ",(0,s.jsx)(n.code,{children:"$relationship"})," property is an array of relationships. This creates relationships to your database tables."]}),"\n",(0,s.jsx)(n.h3,{id:"one-to-one-entityhas_one",children:"One-to-One/ Entity::HAS_ONE"}),"\n",(0,s.jsxs)(n.p,{children:["One-to-one relationships are defined using the ",(0,s.jsx)(n.code,{children:"Entity::HAS_ONE"})," constant. The first item is the relationship type, the second item is the related entity, and the third item is the foreign key."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nnamespace App\\Entities;\n\nuse Pocketframe\\PocketORM\\Entity\\Entity;\nuse App\\Entities\\User;\n\nclass Staff extends Entity\n{\n  protected array $relationship = [\n    'user' => [Entity::HAS_ONE, User::class, 'user_id'],\n  ]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The first item in the array is the relationship type, the second item is the related entity, and the third item is the foreign key. The foreign key is the column in the parent entity that references the related entity. The related entity is the entity that is related to the parent entity."}),"\n",(0,s.jsx)(n.p,{children:"You can access the related entity by:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nnamespace App\\Controllers\\Web;\n\nuse App\\Entities\\Staff;\n\n$staff = QueryEngine::find(Staff::class)\n  ->include('user')\n  ->first();\n\n// Access the related entity\n$user = $staff->user;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"one-to-many-entityhas_multiple",children:"One-to-Many/ Entity::HAS_MULTIPLE"}),"\n",(0,s.jsxs)(n.p,{children:["One-to-many relationships are defined using the ",(0,s.jsx)(n.code,{children:"Entity::HAS_MULTIPLE"})," constant. The first item is the relationship type, the second item is the related entity, and the third item is the foreign key."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nnamespace App\\Entities;\nuse Pocketframe\\PocketORM\\Entity\\Entity;\nuse App\\Entities\\Post;\n\nclass Category extends Entity\n{\n  protected array $relationship = [\n    'posts' => [Entity::HAS_MULTIPLE, Post::class, 'post_id'],\n  ];\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);