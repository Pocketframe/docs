"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[4296],{1500:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"getting-deeper/pocket-cli","title":"Pocket CLI","description":"Pocket CLI is a command-line interface for Pocketframe that allows you to interact with your application from the command line. It provides a set of commands that you can use to perform common tasks, such as creating controllers, entities, and views, as well as applying schemas and planting data to your database.","source":"@site/docs/getting-deeper/pocket-cli.md","sourceDirName":"getting-deeper","slug":"/getting-deeper/pocket-cli","permalink":"/docs/docs/getting-deeper/pocket-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/getting-deeper/pocket-cli.md","tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"sidebar_position":19},"sidebar":"tutorialSidebar","previous":{"title":"File Storage","permalink":"/docs/docs/getting-deeper/file-storage"},"next":{"title":"Helper Functions","permalink":"/docs/docs/getting-deeper/helper-functions"}}');var i=n(4848),s=n(8453);const r={sidebar_position:19},c="Pocket CLI",l={},o=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Starting the server",id:"starting-the-server",level:3},{value:"Creating a new controller",id:"creating-a-new-controller",level:3},{value:"Creating a middleware",id:"creating-a-middleware",level:3},{value:"Clear Views",id:"clear-views",level:3},{value:"store",id:"store",level:3},{value:"add",id:"add",level:3},{value:"Creating a new entity",id:"creating-a-new-entity",level:3},{value:"Creating a schema",id:"creating-a-schema",level:3},{value:"Creating a session table",id:"creating-a-session-table",level:3},{value:"Managing schemas",id:"managing-schemas",level:3},{value:"Creating a data planter",id:"creating-a-data-planter",level:3},{value:"Planting the database",id:"planting-the-database",level:3},{value:"Creating a blueprint",id:"creating-a-blueprint",level:3},{value:"Creating a view",id:"creating-a-view",level:3},{value:"Creating a component",id:"creating-a-component",level:3},{value:"Creating a partial view",id:"creating-a-partial-view",level:3},{value:"Displaying help",id:"displaying-help",level:3},{value:"About Pocketframe",id:"about-pocketframe",level:3}];function d(e){const a={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"pocket-cli",children:"Pocket CLI"})}),"\n",(0,i.jsx)(a.p,{children:"Pocket CLI is a command-line interface for Pocketframe that allows you to interact with your application from the command line. It provides a set of commands that you can use to perform common tasks, such as creating controllers, entities, and views, as well as applying schemas and planting data to your database.\nIt is designed to make it easier to work with Pocketframe and to help you automate common tasks that you would normally do from the command line. It is a powerful tool that can help you automate your development workflow and make it easier to manage your application."}),"\n",(0,i.jsx)(a.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(a.h3,{id:"starting-the-server",children:"Starting the server"}),"\n",(0,i.jsxs)(a.p,{children:["To start the server, use the ",(0,i.jsx)(a.code,{children:"serve"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket serve\n"})}),"\n",(0,i.jsxs)(a.p,{children:["This will start the built-in PHP server and serve your application. You can access your application in your web browser at ",(0,i.jsx)(a.code,{children:"http://localhost:8000"}),"."]}),"\n",(0,i.jsxs)(a.p,{children:["You can also specify a different port by using the ",(0,i.jsx)(a.code,{children:"--port"})," option:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket serve --port=8080\n"})}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-new-controller",children:"Creating a new controller"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new controller, use the ",(0,i.jsx)(a.code,{children:"controller:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket controller:create PostController\n"})}),"\n",(0,i.jsx)(a.p,{children:"The generated controller will be placed in the app/Controllers Web or API directory."}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-middleware",children:"Creating a middleware"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new middleware, use the ",(0,i.jsx)(a.code,{children:"middleware:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket middleware:create AuthMiddleware\n"})}),"\n",(0,i.jsx)(a.p,{children:"The generated middleware will be placed in the app/Middleware directory."}),"\n",(0,i.jsx)(a.h3,{id:"clear-views",children:"Clear Views"}),"\n",(0,i.jsxs)(a.p,{children:["To clear the views cache, use the ",(0,i.jsx)(a.code,{children:"clear:views"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket clear:views\n"})}),"\n",(0,i.jsx)(a.p,{children:"This will clear the views cache, which can be useful if you have made changes to your views and want to see the changes immediately."}),"\n",(0,i.jsxs)(a.h3,{id:"store",children:["store",":link"]}),"\n",(0,i.jsxs)(a.p,{children:["To create a symbolic link to the storage directory, use the ",(0,i.jsx)(a.code,{children:"store:link"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket store:link\n"})}),"\n",(0,i.jsx)(a.p,{children:"This will create a symbolic link to the storage directory. This is useful for serving files from the storage directory, such as images or other assets."}),"\n",(0,i.jsxs)(a.h3,{id:"add",children:["add",":key"]}),"\n",(0,i.jsxs)(a.p,{children:["To add a new key to the .env file, use the ",(0,i.jsx)(a.code,{children:"add:key"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket add:key\n"})}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-new-entity",children:"Creating a new entity"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new entity, use the ",(0,i.jsx)(a.code,{children:"entity:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket entity:create User\n"})}),"\n",(0,i.jsx)(a.p,{children:"Options:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"-s"}),": Generate a schema script."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"-b"}),": Generate a blueprint."]}),"\n"]}),"\n",(0,i.jsx)(a.p,{children:"The generated entity will be placed in the app/Entities directory."}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-schema",children:"Creating a schema"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new table script, use the ",(0,i.jsx)(a.code,{children:"schema:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket schema:create CreateUserTable\n"})}),"\n",(0,i.jsx)(a.p,{children:"This will create a new schema script in the database/schema directory. You can then edit this script to define the structure of your table."}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-session-table",children:"Creating a session table"}),"\n",(0,i.jsxs)(a.p,{children:["To create a session table script, use the ",(0,i.jsx)(a.code,{children:"schema:session-table"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket schema:session-table\n"})}),"\n",(0,i.jsx)(a.h3,{id:"managing-schemas",children:"Managing schemas"}),"\n",(0,i.jsxs)(a.p,{children:["To manage database schemas, use the ",(0,i.jsx)(a.code,{children:"schema"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket schema apply\n"})}),"\n",(0,i.jsx)(a.p,{children:"Options:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"apply"}),": Apply all pending schemas scripts."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"rollback"}),": Rollback the last batch of schemas."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"fresh"}),": Drop all tables and reapply all schemas."]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-data-planter",children:"Creating a data planter"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new data planter, use the ",(0,i.jsx)(a.code,{children:"planter:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket planter:create User\n"})}),"\n",(0,i.jsx)(a.admonition,{type:"tip",children:(0,i.jsxs)(a.p,{children:["Do not include the ",(0,i.jsx)(a.code,{children:"Planter"})," suffix when creating a planter. The CLI will automatically append it."]})}),"\n",(0,i.jsx)(a.p,{children:"The generated planter will be placed in the app/Planters directory."}),"\n",(0,i.jsx)(a.h3,{id:"planting-the-database",children:"Planting the database"}),"\n",(0,i.jsxs)(a.p,{children:["To plant the database with data planters, use the ",(0,i.jsx)(a.code,{children:"plant"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket plant\n"})}),"\n",(0,i.jsxs)(a.p,{children:["This will run all the planters in the app/Planters directory. You can also specify a specific planter class to run by using the ",(0,i.jsx)(a.code,{children:"--class"})," option:"]}),"\n",(0,i.jsx)(a.p,{children:"Options:"}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"--class=PlanterClass"}),": Run a specific planter class."]}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-blueprint",children:"Creating a blueprint"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new entity blueprint, use the ",(0,i.jsx)(a.code,{children:"blueprint:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket blueprint:create User\n"})}),"\n",(0,i.jsx)(a.p,{children:"This will create a new blueprint file in the app/Blueprints directory. You can then edit this file to define the structure of your entity."}),"\n",(0,i.jsx)(a.admonition,{type:"tip",children:(0,i.jsxs)(a.p,{children:["Do not include the ",(0,i.jsx)(a.code,{children:"Blueprint"})," suffix when creating a blueprint. The CLI will automatically append it."]})}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-view",children:"Creating a view"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new view file, use the ",(0,i.jsx)(a.code,{children:"view:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket view:create HomeView\n"})}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-component",children:"Creating a component"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new component class with its view stub, use the ",(0,i.jsx)(a.code,{children:"component:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket component:create NavbarComponent\n"})}),"\n",(0,i.jsx)(a.p,{children:"Options:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.code,{children:"--inline"}),": Generate an inline component."]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"creating-a-partial-view",children:"Creating a partial view"}),"\n",(0,i.jsxs)(a.p,{children:["To create a new partial view file, use the ",(0,i.jsx)(a.code,{children:"partial:create"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket partial:create HeaderPartial\n"})}),"\n",(0,i.jsx)(a.h3,{id:"displaying-help",children:"Displaying help"}),"\n",(0,i.jsxs)(a.p,{children:["To display a list of all available commands, use the ",(0,i.jsx)(a.code,{children:"help"})," command:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket help\n"})}),"\n",(0,i.jsx)(a.h3,{id:"about-pocketframe",children:"About Pocketframe"}),"\n",(0,i.jsx)(a.p,{children:"To display information about your application."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-bash",children:"php pocket about\n"})})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>c});var t=n(6540);const i={},s=t.createContext(i);function r(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);