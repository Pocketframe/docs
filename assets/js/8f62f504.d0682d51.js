"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[3538],{1111:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"essentials/routing","title":"Routing","description":"Routing in Pocketframe is managed by the Router class. Routes are defined in routes/web.php and routes/api.php.","source":"@site/docs/essentials/routing.md","sourceDirName":"essentials","slug":"/essentials/routing","permalink":"/docs/docs/essentials/routing","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/essentials/routing.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Bootstrapping","permalink":"/docs/docs/core/bootstrapping"},"next":{"title":"Middleware","permalink":"/docs/docs/essentials/middleware"}}');var t=r(4848),o=r(8453);const i={sidebar_position:5},a="Routing",d={},l=[];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"routing",children:"Routing"})}),"\n",(0,t.jsxs)(n.p,{children:["Routing in Pocketframe is managed by the Router class. Routes are defined in ",(0,t.jsx)(n.code,{children:"routes/web.php"})," and ",(0,t.jsx)(n.code,{children:"routes/api.php"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The Router class is responsible for handling HTTP requests and dispatching them to the appropriate controller action."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"$router->get('/', ['HomeController', 'index'], name: 'home.index');\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The first parameter of the ",(0,t.jsx)(n.code,{children:"get"})," method is the route ",(0,t.jsx)(n.strong,{children:"path"}),", the second parameter is an array containing the ",(0,t.jsx)(n.strong,{children:"controller"})," and ",(0,t.jsx)(n.strong,{children:"action"}),", and the third parameter is the ",(0,t.jsx)(n.strong,{children:"name"})," of the route."]})}),"\n",(0,t.jsx)(n.p,{children:"You can also define middleware for routes using route groups."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"// routes/web.php\n\nuse App\\Controllers\\DashboardController;\n\n$router->group(['middleware' => 'auth'], function ($router) {\n  $router->get('/dashboard', ['DashboardController', 'index'], name: 'dashboard.index');\n});\n\n/*\nOutput:\n 127.0.0.1:8000/dashboard\n*/\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to define prefix routes, you can use the ",(0,t.jsx)(n.code,{children:"group"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"// routes/web.php\n\nuse App\\Controllers\\DashboardController;\n\n$router->group(['prefix' => 'admin'], function ($router) {\n  $router->get('/dashboard', ['DashboardController', 'index'], name: 'dashboard.index');\n});\n\n/*\nOutput:\n 127.0.0.1:8000/admin/dashboard\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also group routes by their controllers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"// routes/web.php\n\nuse App\\Controllers\\PostsController;\n\n$router->group(['controller' => PostsController::class], function ($router) {\n  $router->get('/posts', 'index', name: 'posts.index');\n  $router->get('/posts/create', 'create', name: 'posts.create');\n});\n\n/*\nOutput:\n 127.0.0.1:8000/posts\n 127.0.0.1:8000/posts/create\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:"Combining all features, you can create a route like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"// routes/web.php\n\nuse App\\Controllers\\PostsController;\n\n$router->group([\n  'prefix'     => 'posts',\n  'middleware' => [AuthMiddleware::class, CsrfMiddleware::class],\n  'controller' => PostsController::class\n], function ($router) {\n  $router->get('/', 'index', name: 'posts.index');\n  $router->get('/create', 'create', name: 'posts.create');\n});\n\n/*\nOutput:\n 127.0.0.1:8000/posts\n 127.0.0.1:8000/posts/create\n*/\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Available Methods:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"get()"}),": Define a route for GET requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"post()"}),": Define a route for POST requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"put()"}),": Define a route for PUT requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"delete()"}),": Define a route for DELETE requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"group()"}),": Define a group of routes."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);