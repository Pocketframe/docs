"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[4224],{3153:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>d,default:()=>a,frontMatter:()=>h,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"responses","title":"HTTP Response","description":"Routes and controllers can return a response which will be sent to the user. The response class is used to send HTTP responses. It supports various response types, including views, JSON, redirects and more. This class also supports status codes and headers.","source":"@site/docs/responses.md","sourceDirName":".","slug":"/responses","permalink":"/docs/docs/responses","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/responses.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Request","permalink":"/docs/docs/requests"},"next":{"title":"Database","permalink":"/docs/docs/database"}}');var o=n(4848),r=n(8453);const h={sidebar_position:10},d="HTTP Response",i={},c=[{value:"Available status codes:",id:"available-status-codes",level:3}];function l(e){const s={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"http-response",children:"HTTP Response"})}),"\n",(0,o.jsx)(s.p,{children:"Routes and controllers can return a response which will be sent to the user. The response class is used to send HTTP responses. It supports various response types, including views, JSON, redirects and more. This class also supports status codes and headers."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"return Response::view('home');\n"})}),"\n",(0,o.jsx)(s.h3,{id:"available-status-codes",children:"Available status codes:"}),"\n",(0,o.jsx)(s.p,{children:"This class has has the following status codes."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",metastring:"showLineNumbers",children:"Response::OK\nResponse::CREATED\nResponse::REDIRECT\nResponse::BAD_REQUEST\nResponse::UNAUTHORIZED\nResponse::FORBIDDEN\nResponse::NOT_FOUND\nResponse::METHOD_NOT_ALLOWED\nResponse::PAGE_EXPIRED\nResponse::INTERNAL_SERVER_ERROR\n\n"})}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Available Methods:"})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Render a view with optional data and status code"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to render a view with optional data and status code, you can use the ",(0,o.jsx)(s.code,{children:"view()"})," method. This method will render the view passed to the method and return a response."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::view('home', ['name' => 'John Doe']);\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return JSON response with optional status code"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return a JSON response with optional status code, you can use the ",(0,o.jsx)(s.code,{children:"json()"})," method. This method will return a JSON response with the data passed to the method and the status code passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::json(['name' => 'John Doe']);\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Send the response to the client"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to send the response to the client, you can use the ",(0,o.jsx)(s.code,{children:"send()"})," method. This method will send the response to the client."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::send();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Redirect to a URL with optional status code"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to redirect to a URL with optional status code, you can use the ",(0,o.jsx)(s.code,{children:"redirect()"})," method. This method will redirect the user to the URL passed to the method and the status code passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::redirect('/posts');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return plain text response with optional status code"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return a plain text response with optional status code, you can use the ",(0,o.jsx)(s.code,{children:"text()"})," method. This method will return a plain text response with the text passed to the method and the status code passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::text('Hello, world!');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return empty response with 204 status code"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return an empty response with 204 status code, you can use the ",(0,o.jsx)(s.code,{children:"noContent()"})," method. This method will return an empty response with the status code 204."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::noContent();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return file download response"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return a file download response, you can use the ",(0,o.jsx)(s.code,{children:"file()"})," method. This method will return a file download response with the path passed to the method and the name passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::file('path/to/file.pdf', 'file.pdf');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Stream response content"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to stream response content, you can use the ",(0,o.jsx)(s.code,{children:"stream()"})," method. This method will stream the response content passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::stream(function () {\n  echo 'Hello, world!';\n});\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Set response header"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to set a response header, you can use the ",(0,o.jsx)(s.code,{children:"setHeader()"})," method. This method will set the header passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::setHeader('X-Header-Name', 'X-Header-Value');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Get all response headers"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to get all response headers, you can use the ",(0,o.jsx)(s.code,{children:"getHeaders()"})," method. This method will return an array of all the response headers."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::getHeaders();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Set response cookie"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to set a response cookie, you can use the ",(0,o.jsx)(s.code,{children:"setCookie()"})," method. This method will set the cookie passed to the method. The cookie will be set for the current request."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::setCookie('name', 'value', 0, '/', '', false, false);\n"})}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Parameters available:"})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"name: the name of the cookie"}),"\n",(0,o.jsx)(s.li,{children:"value: the value of the cookie"}),"\n",(0,o.jsx)(s.li,{children:"expire: the expiration date of the cookie"}),"\n",(0,o.jsx)(s.li,{children:"path: the path of the cookie"}),"\n",(0,o.jsx)(s.li,{children:"domain: the domain of the cookie"}),"\n",(0,o.jsx)(s.li,{children:"secure: whether the cookie is secure"}),"\n",(0,o.jsx)(s.li,{children:"httponly: whether the cookie is httponly"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Enable response caching"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to enable response caching, you can use the ",(0,o.jsx)(s.code,{children:"cacheFor()"})," method. This method will cache the response for the number of minutes passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::cacheFor(10);\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Disable response caching"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to disable response caching, you can use the ",(0,o.jsx)(s.code,{children:"noCache()"})," method. This method will disable response caching."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::noCache();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return JSONP response"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return a JSONP response, you can use the ",(0,o.jsx)(s.code,{children:"jsonp()"})," method. This method will return a JSONP response with the data passed to the method and the callback parameter passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::jsonp(['name' => 'John Doe'], 'callback');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Return formatted JSON response"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to return a formatted JSON response, you can use the ",(0,o.jsx)(s.code,{children:"prettyJson()"})," method. This method will return a formatted JSON response with the data passed to the method and the status code passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::prettyJson(['name' => 'John Doe']);\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Add response header"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to add a response header, you can use the ",(0,o.jsx)(s.code,{children:"withHeader()"})," method. This method will add a response header with the name and value passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::withHeader('X-Header-Name', 'X-Header-Value');\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Check if response is successful"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to check if response is successful, you can use the ",(0,o.jsx)(s.code,{children:"isOk()"})," method. This method will return true if the response is successful."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::isOk();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Check if response is redirect"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to check if response is redirect, you can use the ",(0,o.jsx)(s.code,{children:"isRedirect()"})," method. This method will return true if the response is redirect."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::isRedirect();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Check if response is client error"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to check if response is client error, you can use the ",(0,o.jsx)(s.code,{children:"isClientError()"})," method. This method will return true if the response is client error."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::isClientError();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Check if response is server error"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to check if response is server error, you can use the ",(0,o.jsx)(s.code,{children:"isServerError()"})," method. This method will return true if the response is server error."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::isServerError();\n"})}),"\n"]}),"\n",(0,o.jsxs)(s.li,{children:["\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.strong,{children:"Set response as file attachment"})}),"\n",(0,o.jsxs)(s.p,{children:["If you want to set response as file attachment, you can use the ",(0,o.jsx)(s.code,{children:"attachment()"})," method. This method will set the response as a file attachment with the filename passed to the method."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-php",children:"Response::attachment('file.pdf');\n"})}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>h,x:()=>d});var t=n(6540);const o={},r=t.createContext(o);function h(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:h(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);