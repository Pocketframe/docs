"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[9474],{2968:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"validation","title":"Validation","description":"Introduction","source":"@site/docs/validation.md","sourceDirName":".","slug":"/validation","permalink":"/docs/validation","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/validation.md","tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Session","permalink":"/docs/session"},"next":{"title":"Console","permalink":"/docs/console"}}');var r=s(4848),l=s(8453);const t={sidebar_position:17},a="Validation",o={},d=[{value:"Introduction",id:"introduction",level:3},{value:"How validators work",id:"how-validators-work",level:3},{value:"Defining the route",id:"defining-the-route",level:3},{value:"Creating the controller",id:"creating-the-controller",level:3},{value:"Adding validation",id:"adding-validation",level:3},{value:"Defining validation errors",id:"defining-validation-errors",level:3},{value:"Repopulating the form",id:"repopulating-the-form",level:3},{value:"Displaying customem error messages",id:"displaying-customem-error-messages",level:3},{value:"Available validation rules",id:"available-validation-rules",level:3}];function c(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"validation",children:"Validation"})}),"\n",(0,r.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"Validation is one of the most important features in the modern web application development. This is why Pocketframe comes packed with a powerful validation system that allows you to validate user input and ensure that it meets the required criteria."}),"\n",(0,r.jsx)(n.h3,{id:"how-validators-work",children:"How validators work"}),"\n",(0,r.jsx)(n.p,{children:"To learn how validation works in Pocketframe, let's create a simple application that allows us to create a new post."}),"\n",(0,r.jsx)(n.h3,{id:"defining-the-route",children:"Defining the route"}),"\n",(0,r.jsxs)(n.p,{children:["First, we need to define a route in ",(0,r.jsx)(n.code,{children:"web.php"})," that will handle the creation of a new post. We can do this by adding the following code to our routes file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nuse App\\Controllers\\PostController;\n\nRoute::get('/posts/create', [PostController::class, 'create']);\nRoute::post('/posts', [PostController::class, 'store']);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"get"})," method is used to define a route that will be accessible via a GET request, while the ",(0,r.jsx)(n.code,{children:"post"})," method is used to define a route that will be accessible via a POST request."]}),"\n",(0,r.jsx)(n.h3,{id:"creating-the-controller",children:"Creating the controller"}),"\n",(0,r.jsxs)(n.p,{children:["Next, we need to create a controller that will handle the creation of a new post. We can do this by creating a new file called ",(0,r.jsx)(n.code,{children:"PostController.php"})," in the ",(0,r.jsx)(n.code,{children:"app/Controllers"})," directory and adding the following code to it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"<?php\nnamespace App\\Controllers;\n\nuse Pocketframe\\Http\\Request;\nuse Pocketframe\\Http\\Response;\n\nclass PostController\n{\n  public function create()\n  {\n    return Response::view('posts.create');\n  }\n\n  public function store(Request $request)\n  {\n    // Logic goes here\n\n    return Response::redirect('/posts');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-validation",children:"Adding validation"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have defined the route and created the controller, we can add validation to the ",(0,r.jsx)(n.code,{children:"store"})," method. We can do this by adding the following code to the ",(0,r.jsx)(n.code,{children:"store"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Masks\\Validator;\n\npublic function store(Request $request)\n{\n   Validator::validate($request->all(), [\n        'title' => ['required', 'string'],\n        'body'  => ['required'],\n      ])\n      ->failed();\n\n  ....\n\n  return Response::redirect('/posts');\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we are using the ",(0,r.jsx)(n.code,{children:"Validator"})," mask to validate the input data. You should import this ",(0,r.jsx)(n.strong,{children:"mask"}),"  ",(0,r.jsx)(n.code,{children:"Pocketframe\\Masks\\Validator;"})," for you to able to use it We are passing the request data and an array of validation rules to the ",(0,r.jsx)(n.code,{children:"validate"})," method. The ",(0,r.jsx)(n.code,{children:"validate"})," method will return a ",(0,r.jsx)(n.code,{children:"Validator"})," instance, which we can use to check if the validation failed or not."]}),"\n",(0,r.jsx)(n.h3,{id:"defining-validation-errors",children:"Defining validation errors"}),"\n",(0,r.jsx)(n.p,{children:"If the incoming request fails validation, we can display the validation errors to the user."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<-- /resources/views/post/create.view.php --\x3e\n\n<form method="POST" action="{{ route(\'posts.store\') }}">\n  @csrf\n  <div>\n    <label for="title">Post Title</label>\n    <input id="title" type="text" name="title" />\n    {{ display_errors(\'title\') }}\n  </div>\n</form>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"repopulating-the-form",children:"Repopulating the form"}),"\n",(0,r.jsx)(n.p,{children:"If the validation fails, we can repopulate the form with the user's input by adding the following code in the form input."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'\x3c!-- /resources/views/post/create.view.php --\x3e\n\n <input id="title" type="text" name="title" value="{{ old(\'title\') }}"/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"displaying-customem-error-messages",children:"Displaying customem error messages"}),"\n",(0,r.jsx)(n.p,{children:"You can also display custom error messages for specific fields by calling a message method on the validator instance."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Masks\\Validator;\n\nValidator::validate($request->all(), [\n 'title' => ['required', 'string'],\n 'body'  => ['required'],\n])\n->message([\n 'title.required' => 'You need to fill this',\n 'body.required'  => 'Body cannot be empty'\n])\n->failed();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"available-validation-rules",children:"Available validation rules"}),"\n",(0,r.jsx)(n.p,{children:"Pocketframe provides a set of built-in validation rules that you can use to validate user input. Here are some of the most commonly used rules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"required"}),": This rule ensures that the field is not empty.\n",(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'name' => ['required']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"string"}),": This rule ensures that the field contains only strings.\n",(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'name' => ['string']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"email"}),": This rule ensures that the field contains a valid email address.\n",(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'email' => ['email']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"numeric"}),": This rule ensures that the field contains only numeric values.\n",(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'age' => ['numeric']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"min"}),": This rule ensures that the field contains a minimum number of characters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'password' => ['min:8']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"max"}),": This rule ensures that the field contains a maximum number of characters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'username' => ['max:20']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Unique"}),": This rule ensures that the field contains a unique value."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Pocketframe\\Validation\\Rules\\Unique;\n\n'email' => [new Unique('users', 'email')]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"date"}),": This rule ensures that the field contains a valid date."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'date_of_birth' => ['date']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"image"}),": This rule ensures that the field contains a valid image file."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'avatar' => ['image']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"nullable"}),": This rule allows the field to be empty."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'bio' => ['nullable']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"lowercase"}),": This rule ensures that the field contains only lowercase characters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'username' => ['lowercase']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"uppercase"}),": This rule ensures that the field contains only uppercase characters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'username' => ['uppercase']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"sometime"}),": This rule ensures that the field contains only alphanumeric characters."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'username' => ['sometime', 'required']\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"file"}),": This rule ensures that the field contains a valid file."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"'avatar' => ['file']\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);