"use strict";(self.webpackChunkpocketframe_docs=self.webpackChunkpocketframe_docs||[]).push([[822],{0:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"database","title":"Database","description":"Introduction","source":"@site/docs/database.md","sourceDirName":".","slug":"/database","permalink":"/docs/database","draft":false,"unlisted":false,"editUrl":"https://github.com/pocketframe/docs/tree/main/docs/database.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Response","permalink":"/docs/responses"},"next":{"title":"Error Handling and Exceptions","permalink":"/docs/error-handling"}}');var l=s(4848),i=s(8453);const t={sidebar_position:11},c="Database",a={},d=[{value:"Introduction",id:"introduction",level:3},{value:"Configuration",id:"configuration",level:3}];function o(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"database",children:"Database"})}),"\n",(0,l.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsxs)(n.p,{children:["Pocketframe provides a convenient ",(0,l.jsx)(n.code,{children:"DB"})," class for database interactions. With it, you can easily perform common queries, joins, pagination, and transactions\u2014all while leveraging a familiar, chainable API. This guide walks you through configuring the database connection and using the various methods available."]}),"\n",(0,l.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["You can configure the database by adding the following to the ",(0,l.jsx)(n.code,{children:".env"})," file."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=your_database\nDB_USERNAME=your_username\nDB_PASSWORD=your_password\n"})}),"\n",(0,l.jsxs)(n.p,{children:["After configuring the database, you can use the ",(0,l.jsx)(n.code,{children:"DB"})," class to interact with the database."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\n$posts = DB::table('posts')->get();\n\n/*\nOutput:\n  [\n    [\n      'id' => 1,\n      'title' => 'Post 1',\n      'body' => 'Body 1',\n    ],\n    [\n      'id' => 2,\n      'title' => 'Post 2',\n      'body' => 'Body 2',\n    ],\n  ]\n*/\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Available Methods:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"table(string $table)"})}),"\n",(0,l.jsx)(n.p,{children:"Sets the table name for the query. You can pass the table name to the method."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The name of the table to query."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"select(array $columns)"})}),"\n",(0,l.jsx)(n.p,{children:"Specifies which columns to select from the table. You can pass an array of columns to select from the table."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->select(['id', 'name', 'email'])\n\n/*\nOutput:\n  [\n    [\n      'id' => 1,\n      'name' => 'John Doe',\n      'email' => 'john@example.com',\n    ],\n    [\n      'id' => 2,\n      'name' => 'Jane Doe',\n      'email' => 'jane@example.com',\n    ],\n  ]\n*/\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$columns"}),": An array of columns to select from the table."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"where(string $column, string $operator, mixed $value)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds a WHERE clause to filter results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('age', '>', 18)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$operator"}),": The operator to use in the filter."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$value"}),": The value to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"orWhere(string $column, string $operator, string $value)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds an OR WHERE clause to filter results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('age', '>', 18)->orWhere('role', '=', 'admin')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$operator"}),": The operator to use in the filter."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$value"}),": The value to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"andWhere(string $column, string $operator, string $value)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds an AND WHERE clause to filter results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('age', '>', 18)->andWhere('active', '=', 1)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$operator"}),": The operator to use in the filter."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$value"}),": The value to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"whereNull(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds a WHERE IS NULL clause."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->whereNull('deleted_at')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"whereNotNull(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds a WHERE IS NOT NULL clause."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->whereNotNull('email')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"andWhereNull(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds an AND WHERE IS NULL clause."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('active', '=', 1)->andWhereNull('deleted_at')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"orIsNull(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds an OR WHERE IS NULL clause."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('active', '=', 1)->orIsNull('deleted_at')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"orderByDesc(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Orders results by a column in descending order."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->orderByDesc('created_at')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to order by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"orderByAsc(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Orders results by a column in ascending order."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->orderByAsc('name')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to order by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"orWhereNotNull(string $column)"})}),"\n",(0,l.jsx)(n.p,{children:"Adds an OR WHERE IS NOT NULL clause."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->where('active', '=', 1)->orWhereNotNull('email')\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$column"}),": The column to filter by."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"join(string $table, string $firstColumn, string $operator, string $secondColumn, string $type = 'INNER')"})}),"\n",(0,l.jsx)(n.p,{children:"Adds a JOIN clause to the query."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->join('posts', 'users.id', '=', 'posts.user_id')\n\n/*\nOutput:\n  [\n    [\n      'id' => 1,\n      'name' => 'John Doe',\n      'email' => 'john@example.com',\n      'posts' => [\n        [\n          'id' => 1,\n          'title' => 'Post 1',\n          'body' => 'Body 1',\n        ],\n        [\n          'id' => 2,\n          'title' => 'Post 2',\n          'body' => 'Body 2',\n        ],\n      ],\n    ],\n  ]\n*/\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The table to join."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$firstColumn"}),": The first column to join on."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$operator"}),": The operator to use in the join."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$secondColumn"}),": The second column to join on."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$type"}),": The type of join to use."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"limit(int $limit)"})}),"\n",(0,l.jsx)(n.p,{children:"Limits the number of results returned."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->limit(10)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$limit"}),": The number of results to return."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"offset(int $offset)"})}),"\n",(0,l.jsx)(n.p,{children:"Sets the offset for the results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->offset(10)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$offset"}),": The offset to set for the results."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"get()"})}),"\n",(0,l.jsx)(n.p,{children:"Executes the query and returns all results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"DB::table('users')->get()\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"first()"})}),"\n",(0,l.jsx)(n.p,{children:"Gets the first result from the query."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"DB::table('users')->first()\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"count()"})}),"\n",(0,l.jsx)(n.p,{children:"Counts the number of results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->count()\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"paginate(int $perPage = 15)"})}),"\n",(0,l.jsx)(n.p,{children:"Paginates the results."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::table('users')->paginate(20)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$perPage"}),": The number of results to return per page."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"insert(string $table, array $columns)"})}),"\n",(0,l.jsx)(n.p,{children:"Inserts a new record."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::insert('users',\n[\n  'name' => 'John',\n  'email' => 'john@example.com'\n]);\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The table to insert the record into."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$columns"}),": An array of columns to insert into the table."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"update(string $table, array $sets, array $condition)"})}),"\n",(0,l.jsx)(n.p,{children:"Updates existing records."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::update('users',\n[\n  'name' => 'John',\n  'email' => 'johndoe@example.com'\n],\n[\n  'id' => 1\n]);\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The table to update the record in."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$sets"}),": An array of columns to update."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$condition"}),": An array of conditions to update the record."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"delete(string $table, array $condition)"})}),"\n",(0,l.jsx)(n.p,{children:"Soft deletes records (sets deleted_at)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"DB::delete('users', ['id' => 1])\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The table to delete the record from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$condition"}),": An array of conditions to delete the record."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"forceDelete(string $table, array $condition)"})}),"\n",(0,l.jsx)(n.p,{children:"Permanently deletes records."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::forceDelete('users', ['id' => 1])\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$table"}),": The table to delete the record from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$condition"}),": An array of conditions to delete the record."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"transaction(callable $callback)"})}),"\n",(0,l.jsx)(n.p,{children:"Executes queries within a transaction."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",metastring:"showLineNumbers",children:"use Pocketframe\\Database\\DB;\n\nDB::transaction(function() use($request) {\n  // Insert a post\n  $post = DB::insert('posts', [\n    'user_id' => 1,\n    'title' => $request->post('title'),\n    'body' => $request->post('body'),\n  ]);\n\n  // Insert a comment\n  DB::insert('comments', [\n    'post_id' => $post->id,\n    'body' => $request->post('body'),\n  ]);\n})\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"$callback"}),": A callback function to execute the queries."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const l={},i=r.createContext(l);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);